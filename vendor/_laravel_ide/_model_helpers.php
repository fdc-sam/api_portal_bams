<?php

namespace App\Models {

    /**
     * App\Models\Company
     *
     * @property \Illuminate\Support\Carbon $updated_at
     * @property \Illuminate\Support\Carbon $created_at
     * @property string $division_id
     * @property string $country
     * @property string $state
     * @property string $postcode
     * @property string $suburb
     * @property string $street
     * @property string $phone
     * @property string $abn
     * @property string $company
     * @property int $id
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereCompany($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereAbn($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company wherePhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereStreet($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereSuburb($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company wherePostcode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereState($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereCountry($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereDivisionId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company query()
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company select(mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company selectRaw(string $expression)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company addSelect(mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereNested(string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company addWhereExistsQuery(string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company groupByRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company havingNested(string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company havingNull(array|string $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company havingNotNull(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company havingBetween(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company havingRaw(string $sql, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orHavingRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company beforeQuery()
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company afterQuery()
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static Company|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue()
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company cloneForPaginationCount()
     * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
     * @method static void enforceOrderBy()
     * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr()
     * @method static mixed doesntExistOr()
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
     * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
     * @method static bool insert()
     * @method static int insertOrIgnore()
     * @method static int insertGetId(string|null $sequence)
     * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update()
     * @method static int updateFrom()
     * @method static bool updateOrInsert()
     * @method static int upsert(array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static list<string> getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static \Illuminate\Support\Collection getUnionBuilders()
     * @method static mixed getLimit()
     * @method static mixed getOffset()
     * @method static list getBindings()
     * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company mergeBindings(self $query)
     * @method static list cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company clone()
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company cloneWithout()
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company cloneWithoutBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company wherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company wherePastOrFuture(array|string $columns, string $operator, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereToday(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company orWhereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
     * @method static bool chunk(int $count, callable $callback)
     * @method static mixed chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static mixed lazy(int $chunkSize)
     * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static Company|null first(array|string $columns)
     * @method static Company firstOrFail(array|string $columns, string|null $message)
     * @method static Company sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<Company>|Company tap(callable $callback)
     * @method static mixed pipe(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Company extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\NdReferenceCard
     *
     * @property string $bams_security_mobile
     * @property string $bams_security_email
     * @property string $bams_security_contact
     * @property string $service_type
     * @property string $payment_country
     * @property string $payment_state
     * @property string $payment_postcode
     * @property string $payment_suburb
     * @property string $payment_street
     * @property string $payment_mobile
     * @property string $payment_email
     * @property string $payment_position
     * @property string $payment_department
     * @property string $payment_phone
     * @property string $payment_contact
     * @property string $payment_details
     * @property string $client_position
     * @property string $client_department
     * @property string $time
     * @property string $division
     * @property string $created_date
     * @property bool $is_archived
     * @property string $status
     * @property string $bams_site_manager_mobile
     * @property string $bams_site_manager_email
     * @property string $bams_site_manager_contact
     * @property string $bams_project_manager_mobile
     * @property string $bams_project_manager_email
     * @property string $bams_project_manager_contact
     * @property string $council_country
     * @property string $council_state
     * @property string $council_postcode
     * @property string $council_suburb
     * @property string $council_street
     * @property string $council_mobile
     * @property string $council_email
     * @property string $council_phone
     * @property string $council_contact
     * @property string $council
     * @property string $certifier_country
     * @property string $certifier_state
     * @property string $certifier_postcode
     * @property string $certifier_suburb
     * @property string $certifier_street
     * @property string $certifier_mobile
     * @property string $certifier_email
     * @property string $certifier_phone
     * @property string $certifier_contact
     * @property string $certifier
     * @property string $engineer_country
     * @property string $engineer_state
     * @property string $engineer_postcode
     * @property string $engineer_suburb
     * @property string $engineer_street
     * @property string $engineer_mobile
     * @property string $engineer_email
     * @property string $engineer_phone
     * @property string $engineer_contact
     * @property string $engineer
     * @property string $designer_country
     * @property string $designer_state
     * @property string $designer_postcode
     * @property string $designer_suburb
     * @property string $designer_street
     * @property string $designer_mobile
     * @property string $designer_email
     * @property string $designer_phone
     * @property string $designer_contact
     * @property string $designer
     * @property string $special_notes_trading_hours
     * @property string $special_notes_open_date
     * @property string $special_notes_finish_date
     * @property string $special_notes_start_date
     * @property string $special_notes
     * @property string $landlord_security_mobile
     * @property string $landlord_security_email
     * @property string $landlord_security_phone
     * @property string $landlord_security
     * @property string $landlord_facility_manager_mobile
     * @property string $landlord_facility_manager_email
     * @property string $landlord_facility_manager_phone
     * @property string $landlord_facility_manager
     * @property string $landlord_tenancy_coordinator_mobile
     * @property string $landlord_tenancy_coordinator_email
     * @property string $landlord_tenancy_coordinator_phone
     * @property string $landlord_tenancy_coordinator
     * @property string $landlord_design_manager_mobile
     * @property string $landlord_design_manager_email
     * @property string $landlord_design_manager_phone
     * @property string $landlord_design_manager
     * @property string $landlord_leasing_manager_mobile
     * @property string $landlord_leasing_manager_email
     * @property string $landlord_leasing_manager_phone
     * @property string $landlord_leasing_manager
     * @property string $landlord_centre_manager_mobile
     * @property string $landlord_centre_manager_email
     * @property string $landlord_centre_manager_phone
     * @property string $landlord_centre_manager
     * @property string $landlord
     * @property string $project_loading_dock_details
     * @property string $project_country
     * @property string $project_state
     * @property string $project_postcode
     * @property string $project_suburb
     * @property string $project_street
     * @property string $project_mobile
     * @property string $project_email
     * @property string $project_phone
     * @property string $project_contact
     * @property string $project
     * @property string $client_rep_country
     * @property string $client_rep_state
     * @property string $client_rep_postcode
     * @property string $client_rep_suburb
     * @property string $client_rep_street
     * @property string $client_rep_mobile
     * @property string $client_rep_email
     * @property string $client_rep_phone
     * @property string $client_rep_contact
     * @property string $client_rep
     * @property string $client_country
     * @property string $client_state
     * @property string $client_postcode
     * @property string $client_suburb
     * @property string $client_street
     * @property string $client_mobile
     * @property string $client_email
     * @property string $client_phone
     * @property string $client_contact
     * @property string $client_abn
     * @property string $client
     * @property string $completed_date
     * @property string $completed_by
     * @property string $ref_no
     * @property mixed $ref_id
     * @property mixed $rc_id
     * @property-read \App\Models\Reference $reference
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereRcId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereRefId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereRefNo($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereCompletedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereCompletedDate($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereClient($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereClientAbn($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereClientContact($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereClientPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereClientEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereClientMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereClientStreet($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereClientSuburb($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereClientPostcode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereClientState($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereClientCountry($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereClientRep($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereClientRepContact($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereClientRepPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereClientRepEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereClientRepMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereClientRepStreet($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereClientRepSuburb($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereClientRepPostcode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereClientRepState($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereClientRepCountry($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereProject($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereProjectContact($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereProjectPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereProjectEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereProjectMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereProjectStreet($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereProjectSuburb($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereProjectPostcode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereProjectState($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereProjectCountry($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereProjectLoadingDockDetails($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLandlord($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLandlordCentreManager($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLandlordCentreManagerPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLandlordCentreManagerEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLandlordCentreManagerMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLandlordLeasingManager($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLandlordLeasingManagerPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLandlordLeasingManagerEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLandlordLeasingManagerMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLandlordDesignManager($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLandlordDesignManagerPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLandlordDesignManagerEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLandlordDesignManagerMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLandlordTenancyCoordinator($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLandlordTenancyCoordinatorPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLandlordTenancyCoordinatorEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLandlordTenancyCoordinatorMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLandlordFacilityManager($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLandlordFacilityManagerPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLandlordFacilityManagerEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLandlordFacilityManagerMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLandlordSecurity($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLandlordSecurityPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLandlordSecurityEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLandlordSecurityMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereSpecialNotes($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereSpecialNotesStartDate($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereSpecialNotesFinishDate($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereSpecialNotesOpenDate($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereSpecialNotesTradingHours($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereDesigner($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereDesignerContact($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereDesignerPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereDesignerEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereDesignerMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereDesignerStreet($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereDesignerSuburb($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereDesignerPostcode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereDesignerState($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereDesignerCountry($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereEngineer($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereEngineerContact($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereEngineerPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereEngineerEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereEngineerMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereEngineerStreet($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereEngineerSuburb($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereEngineerPostcode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereEngineerState($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereEngineerCountry($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereCertifier($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereCertifierContact($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereCertifierPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereCertifierEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereCertifierMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereCertifierStreet($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereCertifierSuburb($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereCertifierPostcode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereCertifierState($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereCertifierCountry($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereCouncil($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereCouncilContact($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereCouncilPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereCouncilEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereCouncilMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereCouncilStreet($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereCouncilSuburb($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereCouncilPostcode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereCouncilState($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereCouncilCountry($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereBamsProjectManagerContact($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereBamsProjectManagerEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereBamsProjectManagerMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereBamsSiteManagerContact($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereBamsSiteManagerEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereBamsSiteManagerMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereStatus($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereIsArchived($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereCreatedDate($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereDivision($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereTime($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereClientDepartment($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereClientPosition($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard wherePaymentDetails($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard wherePaymentContact($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard wherePaymentPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard wherePaymentDepartment($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard wherePaymentPosition($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard wherePaymentEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard wherePaymentMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard wherePaymentStreet($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard wherePaymentSuburb($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard wherePaymentPostcode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard wherePaymentState($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard wherePaymentCountry($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereServiceType($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereBamsSecurityContact($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereBamsSecurityEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereBamsSecurityMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard query()
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard select(mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard selectRaw(string $expression)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard addSelect(mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereNested(string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard addWhereExistsQuery(string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard groupByRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard havingNested(string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard havingNull(array|string $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard havingNotNull(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard havingBetween(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard havingRaw(string $sql, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orHavingRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard beforeQuery()
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard afterQuery()
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static NdReferenceCard|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue()
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard cloneForPaginationCount()
     * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
     * @method static void enforceOrderBy()
     * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr()
     * @method static mixed doesntExistOr()
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
     * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
     * @method static bool insert()
     * @method static int insertOrIgnore()
     * @method static int insertGetId(string|null $sequence)
     * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update()
     * @method static int updateFrom()
     * @method static bool updateOrInsert()
     * @method static int upsert(array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static list<string> getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static \Illuminate\Support\Collection getUnionBuilders()
     * @method static mixed getLimit()
     * @method static mixed getOffset()
     * @method static list getBindings()
     * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard mergeBindings(self $query)
     * @method static list cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard clone()
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard cloneWithout()
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard cloneWithoutBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard wherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard wherePastOrFuture(array|string $columns, string $operator, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereToday(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard orWhereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
     * @method static bool chunk(int $count, callable $callback)
     * @method static mixed chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static mixed lazy(int $chunkSize)
     * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static NdReferenceCard|null first(array|string $columns)
     * @method static NdReferenceCard firstOrFail(array|string $columns, string|null $message)
     * @method static NdReferenceCard sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<NdReferenceCard>|NdReferenceCard tap(callable $callback)
     * @method static mixed pipe(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class NdReferenceCard extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Reference
     *
     * @property \Illuminate\Support\Carbon $updated_at
     * @property \Illuminate\Support\Carbon $created_at
     * @property string $project_manager_mobile
     * @property string $project_manager_email
     * @property string $project_manager_contact
     * @property string $time
     * @property string $division_id
     * @property string $templatedivision
     * @property string $custom_status
     * @property string|null $status
     * @property bool $is_archived
     * @property string|null $folder
     * @property string $completed_date
     * @property string $completed_by
     * @property string $ref_no
     * @property int $id
     * @property-read \App\Models\ReferenceProject $project
     * @property-read \App\Models\ReferenceClient $client
     * @property-read \App\Models\ReferenceClient $referenceClientRep
     * @property-read \App\Models\ReferenceClient $referencePaymentDetail
     * @property-read \App\Models\ReferenceClient $referenceLandlord
     * @property-read \App\Models\ReferenceClient $referenceSpecialNote
     * @property-read \App\Models\ReferenceClient $referenceEngineer
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereRefNo($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereCompletedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereCompletedDate($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereFolder($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereIsArchived($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereStatus($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereCustomStatus($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereTemplatedivision($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereDivisionId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereTime($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereProjectManagerContact($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereProjectManagerEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereProjectManagerMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference query()
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference select(mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference selectRaw(string $expression)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference addSelect(mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereNested(string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference addWhereExistsQuery(string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference groupByRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference havingNested(string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference havingNull(array|string $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference havingNotNull(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference havingBetween(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference havingRaw(string $sql, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orHavingRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference beforeQuery()
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference afterQuery()
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static Reference|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue()
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference cloneForPaginationCount()
     * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
     * @method static void enforceOrderBy()
     * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr()
     * @method static mixed doesntExistOr()
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
     * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
     * @method static bool insert()
     * @method static int insertOrIgnore()
     * @method static int insertGetId(string|null $sequence)
     * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update()
     * @method static int updateFrom()
     * @method static bool updateOrInsert()
     * @method static int upsert(array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static list<string> getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static \Illuminate\Support\Collection getUnionBuilders()
     * @method static mixed getLimit()
     * @method static mixed getOffset()
     * @method static list getBindings()
     * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference mergeBindings(self $query)
     * @method static list cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference clone()
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference cloneWithout()
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference cloneWithoutBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference wherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference wherePastOrFuture(array|string $columns, string $operator, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereToday(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference orWhereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
     * @method static bool chunk(int $count, callable $callback)
     * @method static mixed chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static mixed lazy(int $chunkSize)
     * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static Reference|null first(array|string $columns)
     * @method static Reference firstOrFail(array|string $columns, string|null $message)
     * @method static Reference sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<Reference>|Reference tap(callable $callback)
     * @method static mixed pipe(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Reference extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\ReferenceClient
     *
     * @property \Illuminate\Support\Carbon $updated_at
     * @property \Illuminate\Support\Carbon $created_at
     * @property string $client_position
     * @property string $client_department
     * @property string $client_abn
     * @property string $client_country
     * @property string $client_state
     * @property string $client_postcode
     * @property string $client_suburb
     * @property string $client_street
     * @property string $client_mobile
     * @property string $client_mobile_code
     * @property string $client_email
     * @property string $client_phone
     * @property string $client_phone_code
     * @property string $client_contact
     * @property string $client
     * @property mixed $ref_id
     * @property mixed $rc_id
     * @property-read \App\Models\Reference $reference
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereRcId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereRefId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereClient($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereClientContact($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereClientPhoneCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereClientPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereClientEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereClientMobileCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereClientMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereClientStreet($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereClientSuburb($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereClientPostcode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereClientState($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereClientCountry($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereClientAbn($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereClientDepartment($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereClientPosition($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient query()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient select(mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient selectRaw(string $expression)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient addSelect(mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereNested(string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient addWhereExistsQuery(string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient groupByRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient havingNested(string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient havingNull(array|string $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient havingNotNull(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient havingBetween(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient havingRaw(string $sql, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orHavingRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient beforeQuery()
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient afterQuery()
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static ReferenceClient|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue()
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient cloneForPaginationCount()
     * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
     * @method static void enforceOrderBy()
     * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr()
     * @method static mixed doesntExistOr()
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
     * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
     * @method static bool insert()
     * @method static int insertOrIgnore()
     * @method static int insertGetId(string|null $sequence)
     * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update()
     * @method static int updateFrom()
     * @method static bool updateOrInsert()
     * @method static int upsert(array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static list<string> getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static \Illuminate\Support\Collection getUnionBuilders()
     * @method static mixed getLimit()
     * @method static mixed getOffset()
     * @method static list getBindings()
     * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient mergeBindings(self $query)
     * @method static list cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient clone()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient cloneWithout()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient cloneWithoutBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient wherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient wherePastOrFuture(array|string $columns, string $operator, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereToday(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient orWhereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
     * @method static bool chunk(int $count, callable $callback)
     * @method static mixed chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static mixed lazy(int $chunkSize)
     * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static ReferenceClient|null first(array|string $columns)
     * @method static ReferenceClient firstOrFail(array|string $columns, string|null $message)
     * @method static ReferenceClient sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClient>|ReferenceClient tap(callable $callback)
     * @method static mixed pipe(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class ReferenceClient extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\ReferenceClientRep
     *
     * @property \Illuminate\Support\Carbon $updated_at
     * @property \Illuminate\Support\Carbon $created_at
     * @property string $client_rep_country
     * @property string $client_rep_state
     * @property string $client_rep_postcode
     * @property string $client_rep_suburb
     * @property string $client_rep_street
     * @property string $client_rep_mobile
     * @property string $client_recp_mobile_code
     * @property string $client_rep_email
     * @property string $client_rep_phone
     * @property string $client_recp_phone_code
     * @property string $client_rep_contact
     * @property string $client_rep
     * @property mixed $ref_id
     * @property mixed $rcr_id
     * @property-read \App\Models\Reference $reference
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereRcrId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereRefId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereClientRep($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereClientRepContact($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereClientRecpPhoneCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereClientRepPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereClientRepEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereClientRecpMobileCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereClientRepMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereClientRepStreet($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereClientRepSuburb($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereClientRepPostcode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereClientRepState($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereClientRepCountry($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep query()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep select(mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep selectRaw(string $expression)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep addSelect(mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereNested(string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep addWhereExistsQuery(string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep groupByRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep havingNested(string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep havingNull(array|string $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep havingNotNull(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep havingBetween(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep havingRaw(string $sql, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orHavingRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep beforeQuery()
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep afterQuery()
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static ReferenceClientRep|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue()
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep cloneForPaginationCount()
     * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
     * @method static void enforceOrderBy()
     * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr()
     * @method static mixed doesntExistOr()
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
     * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
     * @method static bool insert()
     * @method static int insertOrIgnore()
     * @method static int insertGetId(string|null $sequence)
     * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update()
     * @method static int updateFrom()
     * @method static bool updateOrInsert()
     * @method static int upsert(array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static list<string> getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static \Illuminate\Support\Collection getUnionBuilders()
     * @method static mixed getLimit()
     * @method static mixed getOffset()
     * @method static list getBindings()
     * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep mergeBindings(self $query)
     * @method static list cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep clone()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep cloneWithout()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep cloneWithoutBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep wherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep wherePastOrFuture(array|string $columns, string $operator, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereToday(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep orWhereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
     * @method static bool chunk(int $count, callable $callback)
     * @method static mixed chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static mixed lazy(int $chunkSize)
     * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static ReferenceClientRep|null first(array|string $columns)
     * @method static ReferenceClientRep firstOrFail(array|string $columns, string|null $message)
     * @method static ReferenceClientRep sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceClientRep>|ReferenceClientRep tap(callable $callback)
     * @method static mixed pipe(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class ReferenceClientRep extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\ReferenceEngineer
     *
     * @property \Illuminate\Support\Carbon $updated_at
     * @property \Illuminate\Support\Carbon $created_at
     * @property string|null $bams_site_manager_mobile
     * @property string|null $site_area_code
     * @property string|null $bams_site_manager_email
     * @property string|null $bams_site_manager_contact
     * @property string|null $bams_project_manager_mobile
     * @property string|null $project_area_code
     * @property string|null $bams_project_manager_email
     * @property string|null $bams_project_manager_contact
     * @property string|null $council_country
     * @property string|null $council_state
     * @property string|null $council_postcode
     * @property string|null $council_suburb
     * @property string|null $council_street
     * @property string|null $council_mobile
     * @property string|null $council_mobile_code
     * @property string|null $council_email
     * @property string|null $council_phone
     * @property string|null $councial_phone_code
     * @property string|null $council_contact
     * @property string|null $council
     * @property string|null $certifier_country
     * @property string|null $certifier_state
     * @property string|null $certifier_postcode
     * @property string|null $certifier_suburb
     * @property string|null $certifier_street
     * @property string|null $certifier_mobile
     * @property string|null $certifer_mobile_code
     * @property string|null $certifier_email
     * @property string|null $certifier_phone
     * @property string|null $certifier_phone_code
     * @property string|null $certifier_contact
     * @property string|null $certifier
     * @property string|null $engineer_country
     * @property string|null $engineer_state
     * @property string|null $engineer_postcode
     * @property string|null $engineer_suburb
     * @property string|null $engineer_street
     * @property string|null $engineer_mobile
     * @property string|null $engineer_mobile_code
     * @property string|null $engineer_email
     * @property string|null $engineer_phone
     * @property string|null $engineer_phone_code
     * @property string|null $engineer_contact
     * @property string|null $engineer
     * @property mixed $ref_id
     * @property int $id
     * @property-read \App\Models\Reference $reference
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereRefId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereEngineer($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereEngineerContact($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereEngineerPhoneCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereEngineerPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereEngineerEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereEngineerMobileCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereEngineerMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereEngineerStreet($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereEngineerSuburb($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereEngineerPostcode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereEngineerState($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereEngineerCountry($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereCertifier($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereCertifierContact($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereCertifierPhoneCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereCertifierPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereCertifierEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereCertiferMobileCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereCertifierMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereCertifierStreet($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereCertifierSuburb($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereCertifierPostcode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereCertifierState($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereCertifierCountry($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereCouncil($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereCouncilContact($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereCouncialPhoneCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereCouncilPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereCouncilEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereCouncilMobileCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereCouncilMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereCouncilStreet($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereCouncilSuburb($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereCouncilPostcode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereCouncilState($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereCouncilCountry($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereBamsProjectManagerContact($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereBamsProjectManagerEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereProjectAreaCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereBamsProjectManagerMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereBamsSiteManagerContact($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereBamsSiteManagerEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereSiteAreaCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereBamsSiteManagerMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer query()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer select(mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer selectRaw(string $expression)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer addSelect(mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereNested(string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer addWhereExistsQuery(string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer groupByRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer havingNested(string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer havingNull(array|string $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer havingNotNull(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer havingBetween(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer havingRaw(string $sql, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orHavingRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer beforeQuery()
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer afterQuery()
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static ReferenceEngineer|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue()
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer cloneForPaginationCount()
     * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
     * @method static void enforceOrderBy()
     * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr()
     * @method static mixed doesntExistOr()
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
     * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
     * @method static bool insert()
     * @method static int insertOrIgnore()
     * @method static int insertGetId(string|null $sequence)
     * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update()
     * @method static int updateFrom()
     * @method static bool updateOrInsert()
     * @method static int upsert(array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static list<string> getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static \Illuminate\Support\Collection getUnionBuilders()
     * @method static mixed getLimit()
     * @method static mixed getOffset()
     * @method static list getBindings()
     * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer mergeBindings(self $query)
     * @method static list cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer clone()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer cloneWithout()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer cloneWithoutBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer wherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer wherePastOrFuture(array|string $columns, string $operator, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereToday(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer orWhereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
     * @method static bool chunk(int $count, callable $callback)
     * @method static mixed chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static mixed lazy(int $chunkSize)
     * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static ReferenceEngineer|null first(array|string $columns)
     * @method static ReferenceEngineer firstOrFail(array|string $columns, string|null $message)
     * @method static ReferenceEngineer sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEngineer>|ReferenceEngineer tap(callable $callback)
     * @method static mixed pipe(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class ReferenceEngineer extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\ReferenceLandlord
     *
     * @property \Illuminate\Support\Carbon $updated_at
     * @property \Illuminate\Support\Carbon $created_at
     * @property string $landlord_security_mobile
     * @property string $security_mobile_area_code
     * @property string $landlord_security_email
     * @property string $landlord_security_phone
     * @property string $security_phone_area_code
     * @property string $landlord_security
     * @property string $landlord_facility_manager_mobile
     * @property string $facility_mobile_area_code
     * @property string $landlord_facility_manager_email
     * @property string $landlord_facility_manager_phone
     * @property string $facility_phone_area_code
     * @property string $landlord_facility_manager
     * @property string $landlord_tenancy_coordinator_mobile
     * @property string $tenancy_mobile_area_code
     * @property string $landlord_tenancy_coordinator_email
     * @property string $landlord_tenancy_coordinator_phone
     * @property string $tenancy_phone_area_code
     * @property string $landlord_tenancy_coordinator
     * @property string $landlord_design_manager_mobile
     * @property string $design_mobile_area_code
     * @property string $landlord_design_manager_phone
     * @property string $design_phone_area_code
     * @property string $landlord_design_manager_email
     * @property string $landlord_design_manager
     * @property string $landlord_leasing_manager_mobile
     * @property string $leasing_mobile_area_code
     * @property string $landlord_leasing_manager_email
     * @property string $landlord_leasing_manager_phone
     * @property string $leasing_phone_area_code
     * @property string $landlord_leasing_manager
     * @property string $landlord_centre_manager_mobile
     * @property string $center_mobile_area_code
     * @property string $landlord_centre_manager_email
     * @property string $landlord_centre_manager_phone
     * @property string $center_phone_area_code
     * @property string $landlord_centre_manager
     * @property string $landlord
     * @property mixed $ref_id
     * @property int $id
     * @property-read \App\Models\Reference $reference
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereRefId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLandlord($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLandlordCentreManager($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereCenterPhoneAreaCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLandlordCentreManagerPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLandlordCentreManagerEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereCenterMobileAreaCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLandlordCentreManagerMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLandlordLeasingManager($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLeasingPhoneAreaCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLandlordLeasingManagerPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLandlordLeasingManagerEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLeasingMobileAreaCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLandlordLeasingManagerMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLandlordDesignManager($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLandlordDesignManagerEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereDesignPhoneAreaCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLandlordDesignManagerPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereDesignMobileAreaCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLandlordDesignManagerMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLandlordTenancyCoordinator($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereTenancyPhoneAreaCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLandlordTenancyCoordinatorPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLandlordTenancyCoordinatorEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereTenancyMobileAreaCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLandlordTenancyCoordinatorMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLandlordFacilityManager($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereFacilityPhoneAreaCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLandlordFacilityManagerPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLandlordFacilityManagerEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereFacilityMobileAreaCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLandlordFacilityManagerMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLandlordSecurity($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereSecurityPhoneAreaCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLandlordSecurityPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLandlordSecurityEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereSecurityMobileAreaCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLandlordSecurityMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord query()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord select(mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord selectRaw(string $expression)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord addSelect(mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereNested(string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord addWhereExistsQuery(string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord groupByRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord havingNested(string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord havingNull(array|string $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord havingNotNull(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord havingBetween(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord havingRaw(string $sql, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orHavingRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord beforeQuery()
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord afterQuery()
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static ReferenceLandlord|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue()
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord cloneForPaginationCount()
     * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
     * @method static void enforceOrderBy()
     * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr()
     * @method static mixed doesntExistOr()
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
     * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
     * @method static bool insert()
     * @method static int insertOrIgnore()
     * @method static int insertGetId(string|null $sequence)
     * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update()
     * @method static int updateFrom()
     * @method static bool updateOrInsert()
     * @method static int upsert(array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static list<string> getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static \Illuminate\Support\Collection getUnionBuilders()
     * @method static mixed getLimit()
     * @method static mixed getOffset()
     * @method static list getBindings()
     * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord mergeBindings(self $query)
     * @method static list cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord clone()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord cloneWithout()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord cloneWithoutBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord wherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord wherePastOrFuture(array|string $columns, string $operator, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereToday(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord orWhereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
     * @method static bool chunk(int $count, callable $callback)
     * @method static mixed chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static mixed lazy(int $chunkSize)
     * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static ReferenceLandlord|null first(array|string $columns)
     * @method static ReferenceLandlord firstOrFail(array|string $columns, string|null $message)
     * @method static ReferenceLandlord sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceLandlord>|ReferenceLandlord tap(callable $callback)
     * @method static mixed pipe(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class ReferenceLandlord extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\ReferencePaymentDetail
     *
     * @property \Illuminate\Support\Carbon $updated_at
     * @property \Illuminate\Support\Carbon $created_at
     * @property string $postcode
     * @property string $mobile
     * @property string $phone
     * @property string $country
     * @property string $state
     * @property string $suburb
     * @property string $street
     * @property string $email
     * @property string $position
     * @property string $department
     * @property string $contact
     * @property string $abn
     * @property string $client
     * @property string $ref_no
     * @property string $ref_id
     * @property int $id
     * @property-read \App\Models\Reference $reference
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereRefId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereRefNo($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereClient($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereAbn($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereContact($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereDepartment($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail wherePosition($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereStreet($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereSuburb($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereState($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereCountry($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail wherePhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail wherePostcode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail query()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail select(mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail selectRaw(string $expression)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail addSelect(mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereNested(string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail addWhereExistsQuery(string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail groupByRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail havingNested(string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail havingNull(array|string $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail havingNotNull(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail havingBetween(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail havingRaw(string $sql, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orHavingRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail beforeQuery()
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail afterQuery()
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static ReferencePaymentDetail|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue()
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail cloneForPaginationCount()
     * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
     * @method static void enforceOrderBy()
     * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr()
     * @method static mixed doesntExistOr()
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
     * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
     * @method static bool insert()
     * @method static int insertOrIgnore()
     * @method static int insertGetId(string|null $sequence)
     * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update()
     * @method static int updateFrom()
     * @method static bool updateOrInsert()
     * @method static int upsert(array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static list<string> getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static \Illuminate\Support\Collection getUnionBuilders()
     * @method static mixed getLimit()
     * @method static mixed getOffset()
     * @method static list getBindings()
     * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail mergeBindings(self $query)
     * @method static list cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail clone()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail cloneWithout()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail cloneWithoutBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail wherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail wherePastOrFuture(array|string $columns, string $operator, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereToday(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail orWhereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
     * @method static bool chunk(int $count, callable $callback)
     * @method static mixed chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static mixed lazy(int $chunkSize)
     * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static ReferencePaymentDetail|null first(array|string $columns)
     * @method static ReferencePaymentDetail firstOrFail(array|string $columns, string|null $message)
     * @method static ReferencePaymentDetail sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferencePaymentDetail>|ReferencePaymentDetail tap(callable $callback)
     * @method static mixed pipe(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class ReferencePaymentDetail extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\ReferenceProject
     *
     * @property \Illuminate\Support\Carbon $updated_at
     * @property \Illuminate\Support\Carbon $created_at
     * @property string $bams_security_mobile
     * @property string $bams_security_email
     * @property string $bams_security_contact
     * @property string|null $operation
     * @property string $service_id
     * @property string $project_loading_dock_details
     * @property string $project_country
     * @property string $project_state
     * @property string $project_postcode
     * @property string $project_suburb
     * @property string $project_street
     * @property string $project_mobile
     * @property string $project_mobile_code
     * @property string $project_email
     * @property string $project_phone
     * @property string $project_phone_code
     * @property string $project_contact
     * @property string $project
     * @property mixed $ref_id
     * @property mixed $rp_id
     * @property-read \App\Models\Reference $reference
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereRpId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereRefId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereProject($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereProjectContact($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereProjectPhoneCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereProjectPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereProjectEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereProjectMobileCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereProjectMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereProjectStreet($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereProjectSuburb($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereProjectPostcode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereProjectState($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereProjectCountry($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereProjectLoadingDockDetails($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereServiceId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereOperation($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereBamsSecurityContact($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereBamsSecurityEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereBamsSecurityMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject query()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject select(mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject selectRaw(string $expression)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject addSelect(mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereNested(string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject addWhereExistsQuery(string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject groupByRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject havingNested(string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject havingNull(array|string $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject havingNotNull(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject havingBetween(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject havingRaw(string $sql, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orHavingRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject beforeQuery()
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject afterQuery()
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static ReferenceProject|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue()
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject cloneForPaginationCount()
     * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
     * @method static void enforceOrderBy()
     * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr()
     * @method static mixed doesntExistOr()
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
     * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
     * @method static bool insert()
     * @method static int insertOrIgnore()
     * @method static int insertGetId(string|null $sequence)
     * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update()
     * @method static int updateFrom()
     * @method static bool updateOrInsert()
     * @method static int upsert(array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static list<string> getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static \Illuminate\Support\Collection getUnionBuilders()
     * @method static mixed getLimit()
     * @method static mixed getOffset()
     * @method static list getBindings()
     * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject mergeBindings(self $query)
     * @method static list cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject clone()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject cloneWithout()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject cloneWithoutBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject wherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject wherePastOrFuture(array|string $columns, string $operator, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereToday(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject orWhereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
     * @method static bool chunk(int $count, callable $callback)
     * @method static mixed chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static mixed lazy(int $chunkSize)
     * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static ReferenceProject|null first(array|string $columns)
     * @method static ReferenceProject firstOrFail(array|string $columns, string|null $message)
     * @method static ReferenceProject sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceProject>|ReferenceProject tap(callable $callback)
     * @method static mixed pipe(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class ReferenceProject extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\ReferenceSpecialNote
     *
     * @property \Illuminate\Support\Carbon $updated_at
     * @property \Illuminate\Support\Carbon $created_at
     * @property string $designer_country
     * @property string $designer_state
     * @property string $designer_postcode
     * @property string $designer_suburb
     * @property string $designer_street
     * @property string $designer_mobile
     * @property string $designer_mobile_code
     * @property string $designer_email
     * @property string $designer_phone
     * @property string $desginer_phone_code
     * @property string $designer_contact
     * @property string $designer
     * @property string $special_notes_trading_hours
     * @property string|null $special_notes_open_date
     * @property string|null $special_notes_finish_date
     * @property string|null $special_notes_start_date
     * @property string $special_notes
     * @property mixed $ref_id
     * @property int $id
     * @property-read \App\Models\Reference $reference
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereRefId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereSpecialNotes($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereSpecialNotesStartDate($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereSpecialNotesFinishDate($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereSpecialNotesOpenDate($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereSpecialNotesTradingHours($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereDesigner($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereDesignerContact($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereDesginerPhoneCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereDesignerPhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereDesignerEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereDesignerMobileCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereDesignerMobile($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereDesignerStreet($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereDesignerSuburb($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereDesignerPostcode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereDesignerState($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereDesignerCountry($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote query()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote select(mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote selectRaw(string $expression)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote addSelect(mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereNested(string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote addWhereExistsQuery(string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote groupByRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote havingNested(string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote havingNull(array|string $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote havingNotNull(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote havingBetween(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote havingRaw(string $sql, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orHavingRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote beforeQuery()
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote afterQuery()
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static ReferenceSpecialNote|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue()
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote cloneForPaginationCount()
     * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
     * @method static void enforceOrderBy()
     * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr()
     * @method static mixed doesntExistOr()
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
     * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
     * @method static bool insert()
     * @method static int insertOrIgnore()
     * @method static int insertGetId(string|null $sequence)
     * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update()
     * @method static int updateFrom()
     * @method static bool updateOrInsert()
     * @method static int upsert(array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static list<string> getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static \Illuminate\Support\Collection getUnionBuilders()
     * @method static mixed getLimit()
     * @method static mixed getOffset()
     * @method static list getBindings()
     * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote mergeBindings(self $query)
     * @method static list cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote clone()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote cloneWithout()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote cloneWithoutBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote wherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote wherePastOrFuture(array|string $columns, string $operator, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereToday(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote orWhereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
     * @method static bool chunk(int $count, callable $callback)
     * @method static mixed chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static mixed lazy(int $chunkSize)
     * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static ReferenceSpecialNote|null first(array|string $columns)
     * @method static ReferenceSpecialNote firstOrFail(array|string $columns, string|null $message)
     * @method static ReferenceSpecialNote sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<ReferenceSpecialNote>|ReferenceSpecialNote tap(callable $callback)
     * @method static mixed pipe(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class ReferenceSpecialNote extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\Security
     *
     * @property \Illuminate\Support\Carbon $updated_at
     * @property \Illuminate\Support\Carbon $created_at
     * @property string $division_id
     * @property string $country
     * @property string $state
     * @property string $postcode
     * @property string $suburb
     * @property string $street
     * @property string $phone
     * @property string $abn
     * @property string $company
     * @property int $id
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereCompany($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereAbn($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security wherePhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereStreet($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereSuburb($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security wherePostcode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereState($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereCountry($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereDivisionId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security query()
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security select(mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security selectRaw(string $expression)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security addSelect(mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereNested(string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security addWhereExistsQuery(string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security groupByRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security havingNested(string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security havingNull(array|string $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security havingNotNull(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security havingBetween(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security havingRaw(string $sql, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orHavingRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security beforeQuery()
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security afterQuery()
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static Security|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue()
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security cloneForPaginationCount()
     * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
     * @method static void enforceOrderBy()
     * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr()
     * @method static mixed doesntExistOr()
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
     * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
     * @method static bool insert()
     * @method static int insertOrIgnore()
     * @method static int insertGetId(string|null $sequence)
     * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update()
     * @method static int updateFrom()
     * @method static bool updateOrInsert()
     * @method static int upsert(array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static list<string> getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static \Illuminate\Support\Collection getUnionBuilders()
     * @method static mixed getLimit()
     * @method static mixed getOffset()
     * @method static list getBindings()
     * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security mergeBindings(self $query)
     * @method static list cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security clone()
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security cloneWithout()
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security cloneWithoutBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security wherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security wherePastOrFuture(array|string $columns, string $operator, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereToday(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security orWhereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
     * @method static bool chunk(int $count, callable $callback)
     * @method static mixed chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static mixed lazy(int $chunkSize)
     * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static Security|null first(array|string $columns)
     * @method static Security firstOrFail(array|string $columns, string|null $message)
     * @method static Security sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<Security>|Security tap(callable $callback)
     * @method static mixed pipe(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class Security extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\User
     *
     * @property \Illuminate\Support\Carbon $updated_at
     * @property \Illuminate\Support\Carbon $created_at
     * @property string|null $cache_refresh
     * @property mixed $unique_id
     * @property string|null $security
     * @property string $active_status
     * @property string $user_status
     * @property string|null $user_code
     * @property string $user_type
     * @property string|null $profile_image
     * @property string $color
     * @property string|null $phone
     * @property string $country_code
     * @property string|null $company
     * @property string|null $last_name
     * @property string|null $first_name
     * @property mixed $active
     * @property mixed $last_login
     * @property mixed $created_on
     * @property string|null $remember_code
     * @property mixed $forgotten_password_time
     * @property string|null $forgotten_password_code
     * @property string|null $activation_code
     * @property string $email
     * @property string|null $salt
     * @property string $password
     * @property string $username
     * @property string|null $ip_address
     * @property int $id
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \Illuminate\Notifications\DatabaseNotification> $notifications
     * @property-read int|null $notifications_count
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \Laravel\Sanctum\PersonalAccessToken> $tokens
     * @property-read int|null $tokens_count
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIpAddress($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereUsername($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePassword($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereSalt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEmail($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereActivationCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereForgottenPasswordCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereForgottenPasswordTime($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRememberCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCreatedOn($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereLastLogin($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereActive($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereFirstName($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereLastName($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCompany($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCountryCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePhone($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereColor($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereProfileImage($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereUserType($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereUserCode($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereUserStatus($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereActiveStatus($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereSecurity($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereUniqueId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCacheRefresh($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User query()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User select(mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User selectRaw(string $expression)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User addSelect(mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNested(string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User addWhereExistsQuery(string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupByRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNested(string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNull(array|string $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNotNull(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingBetween(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingRaw(string $sql, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User beforeQuery()
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User afterQuery()
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static User|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue()
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneForPaginationCount()
     * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
     * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
     * @method static void enforceOrderBy()
     * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr()
     * @method static mixed doesntExistOr()
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
     * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
     * @method static bool insert()
     * @method static int insertOrIgnore()
     * @method static int insertGetId(string|null $sequence)
     * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update()
     * @method static int updateFrom()
     * @method static bool updateOrInsert()
     * @method static int upsert(array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static list<string> getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static \Illuminate\Support\Collection getUnionBuilders()
     * @method static mixed getLimit()
     * @method static mixed getOffset()
     * @method static list getBindings()
     * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User mergeBindings(self $query)
     * @method static list cleanBindings(array $bindings)
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User clone()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneWithout()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneWithoutBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePastOrFuture(array|string $columns, string $operator, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereToday(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
     * @method static bool chunk(int $count, callable $callback)
     * @method static mixed chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static mixed lazy(int $chunkSize)
     * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static User|null first(array|string $columns)
     * @method static User firstOrFail(array|string $columns, string|null $message)
     * @method static User sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<User>|User tap(callable $callback)
     * @method static mixed pipe(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class User extends \Illuminate\Foundation\Auth\User
    {
        //
    }

}